// Code generated by Kitex v0.0.3. DO NOT EDIT.

package serviceb

import (
	"context"
	"github.com/Duslia997/KiteX-B/KiteX-B/kitex_gen/api"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return serviceBServiceInfo
}

var serviceBServiceInfo = newServiceInfo()

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "ServiceB"
	handlerType := (*api.ServiceB)(nil)
	methods := map[string]kitex.MethodInfo{
		"serviceB": kitex.NewMethodInfo(serviceBHandler, newServiceBServiceBArgs, newServiceBServiceBResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.0.3",
		Extra:           extra,
	}
	return svcInfo
}

func serviceBHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ServiceBServiceBArgs)
	realResult := result.(*api.ServiceBServiceBResult)
	success, err := handler.(api.ServiceB).ServiceB(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceBServiceBArgs() interface{} {
	return api.NewServiceBServiceBArgs()
}

func newServiceBServiceBResult() interface{} {
	return api.NewServiceBServiceBResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ServiceB(ctx context.Context, req *api.Request) (r *api.Response, err error) {
	var _args api.ServiceBServiceBArgs
	_args.Req = req
	var _result api.ServiceBServiceBResult
	if err = p.c.Call(ctx, "serviceB", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
